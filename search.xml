<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2023/06/06/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/06/06/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>这是一个基于centos7.9部署的kolla-openstack平台，适合用于学习……<br>这篇文档是基于官方文档修改后的，如有问题请多多看日志谷歌。<br>看准IP下手，还有账号密码<br>版本为train版</p><h3 id="安装常用软件和安装docker"><a href="#安装常用软件和安装docker" class="headerlink" title="安装常用软件和安装docker"></a>安装常用软件和安装docker</h3><pre><code class="bash">cat &gt; /etc/yum.repos.d/epel.repo &lt;&lt; EOF[epel]name=Extra Packages for Enterprise Linux 7 - \$basearchbaseurl=https://mirrors.ustc.edu.cn/epel/7/\$basearchfailovermethod=priorityenabled=1gpgcheck=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7EOFyum install -y python-devel libffi-devel gcc openssl-devel libselinux-python lvm2 vimyum install -y chrony vim net-tools bash-completion ipset ipvsadm conntrack jq iptables curl sysstat libseccomp wget yum-utils device-mapper-persistent-data lvm2 git ntpdateyum -y install iptables-services &amp;&amp; systemctl start iptables &amp;&amp; systemctl enable iptables &amp;&amp; iptables -F &amp;&amp; service iptables savecat &gt; /etc/sysconfig/network-scripts/ifcfg-ens33 &lt;&lt; EOFTYPE=EthernetBOOTPROTO=staticNAME=ens33DEVICE=ens33ONBOOT=yesIPADDR=192.168.233.41NETMASK=255.255.255.0GATEWAY=192.168.233.2DNS1=114.114.114.114EOFcat &gt; /etc/sysconfig/network-scripts/ifcfg-ens34 &lt;&lt; EOFTYPE=EthernetBOOTPROTO=staticNAME=ens34DEVICE=ens34ONBOOT=yesIPADDR=172.168.233.41NETMASK=255.255.255.0EOFcat &gt; /etc/sysconfig/network-scripts/ifcfg-ens37 &lt;&lt; EOFTYPE=EthernetBOOTPROTO=noneNAME=ens37DEVICE=ens37ONBOOT=yesEOFsystemctl stop NetworkManager &amp;&amp; systemctl disable NetworkManagersystemctl disable firewalld &amp;&amp; systemctl stop firewalldsed -i &#39;s/^SELINUX=enforcing$/SELINUX=disabled/&#39; /etc/selinux/config &amp;&amp; setenforce 0#同步时间ntpdate -u ntp.aliyun.comhwclock -wyum install docker-ce-19.03.15-3.el7 -ysystemctl daemon-reload &amp;&amp; systemctl enable docker &amp;&amp; systemctl restart dockercat &gt;&gt; /etc/docker/daemon.json &lt;&lt; EOF&#123;&quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;,&quot;http://hub-mirror.c.163.com&quot;,&quot;https://docker.mirrors.ustc.edu.cn&quot;]&#125;EOFmkdir -p /etc/systemd/system/docker.service.dcat &gt;&gt; /etc/systemd/system/docker.service.d/kolla.conf &lt;&lt; EOF[Service]MountFlags=sharedEOFsystemctl daemon-reload &amp;&amp; systemctl enable docker &amp;&amp; systemctl restart docker</code></pre><h3 id="安装kolla-ansible使用虚拟方式"><a href="#安装kolla-ansible使用虚拟方式" class="headerlink" title="安装kolla-ansible使用虚拟方式"></a>安装kolla-ansible使用虚拟方式</h3><pre><code class="bash">yum install python-devel libffi-devel gcc openssl-devel libselinux-python -yyum install python-virtualenv -yvirtualenv /path/to/virtualenvsource /path/to/virtualenv/bin/activatepip install -U pippip install -U setuptoolspip install &#39;ansible&lt;2.10&#39;pip install pbrpip install kolla-ansiblesudo mkdir -p /etc/kollasudo chown $USER:$USER /etc/kollacp -r /path/to/virtualenv/share/kolla-ansible/etc_examples/kolla/* /etc/kollacd /root/cp /path/to/virtualenv/share/kolla-ansible/ansible/inventory/* .# 对ansible进行配置mkdir /etc/ansible/cat &gt; /etc/ansible/ansible.cfg &lt;&lt; EOF[defaults]# 跳过首次连接验证提示host_key_checking=False# 利用管道替换默认的拷贝模块pipelining=True# 执行时的并发数forks=100EOF#测试通不通，需要自行准备ssh密钥和免密登录ansible -i all-in-one all -m ping#我这里使用了lvm作为cinder后端，如果使用了ceph，不需要这一步，或者不使用cinderpvcreate /dev/sdbpvcreate /dev/sdcvgcreate cinder-volumes /dev/sdb /dev/sdc</code></pre><h3 id="开始配置kolla-ansible"><a href="#开始配置kolla-ansible" class="headerlink" title="开始配置kolla-ansible"></a>开始配置kolla-ansible</h3><pre><code class="bash">#生成随机密码kolla-genpwd#修改admin密码sed -i &#39;s/^keystone_admin_password.*/keystone_admin_password: tstack@123/&#39; /etc/kolla/passwords.yml#添加配置文件cat &gt;&gt; /etc/kolla/globals.yml &lt;&lt; EOFkolla_base_distro: &quot;centos&quot;kolla_install_type: &quot;source&quot;openstack_release: &quot;train&quot;kolla_internal_vip_address: &quot;192.168.233.240&quot;neutron_tenant_network_types: &quot;vxlan,vlan,flat&quot;network_interface: &quot;ens33&quot;#tunnel_interface: &quot;ens34&quot;neutron_external_interface: &quot;ens37&quot;enable_cinder: &quot;yes&quot;#enable_cinder_backup: &quot;yes&quot;enable_cinder_backend_lvm: &quot;yes&quot;enable_cinder_backend_lvm: &quot;no&quot;nova_compute_virt_type: &quot;qemu&quot;EOF</code></pre><h3 id="提示技巧"><a href="#提示技巧" class="headerlink" title="提示技巧"></a>提示技巧</h3><pre><code class="bash">#提示技巧kolla-ansible -i INVENTORY deploy用于部署和启动所有 Kolla 器皿。kolla-ansible -i INVENTORY destroy用于清理容器和 群集中的卷。kolla-ansible -i INVENTORY mariadb_recovery用于恢复 完全停止MariaDB集群。kolla-ansible -i INVENTORY prechecks用于检查是否所有要求 在部署每个 OpenStack 服务之前满足。kolla-ansible -i INVENTORY post-deploy用于在部署时执行部署后 节点以获取管理员 OpenRC 文件。kolla-ansible -i INVENTORY pull用于拉取容器的所有映像。kolla-ansible -i INVENTORY reconfigure用于重新配置 OpenStack 服务。kolla-ansible -i INVENTORY upgrade用于升级现有的OpenStack 环境。kolla-ansible -i INVENTORY stop用于停止正在运行的容器。kolla-ansible -i INVENTORY deploy-containers用于检查和 必要的更新容器，而不生成配置。kolla-ansible -i INVENTORY prune-images用于修剪孤立的 Docker 主机上的图像。kolla-ansible -i INVENTORY1 -i INVENTORY2 ...可以有多个库存 通过传递 OR 命令行选项多个来指定 次。这对于在多个环境之间共享配置非常有用。 任何常见配置都可以在 中设置，并且可以 用于设置特定于环境的详细信息。--inventory-iINVENTORY1INVENTORY2kolla-ansible -i INVENTORY gather-facts用于收集 Ansible 事实， 例如，填充事实缓存。</code></pre><h3 id="开始部署kolla-ansible"><a href="#开始部署kolla-ansible" class="headerlink" title="开始部署kolla-ansible"></a>开始部署kolla-ansible</h3><pre><code class="bash"># 1.部署依赖的引导服务器:安装一些软件比如docker之类的包kolla-ansible -i ./all-in-one bootstrap-servers#建议先将镜像pull下楼再部署，因为不知道镜像要pull多久，要注意，镜像pull过程中，会改变/etc/docker/daemon.json配置文件，导致上面配置的国内源无法使用，一直卡状态，需要执行一遍后，注意观察网络流量是否很低或者配置文件是否发生改变，然后改回去，ctrl+c掉，重新pull。###########################################改回去docker配置文件####################cat &gt;&gt; /etc/docker/daemon.json &lt;&lt; EOF&#123;&quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;,&quot;http://hub-mirror.c.163.com&quot;,&quot;https://docker.mirrors.ustc.edu.cn&quot;]&#125;EOF#########################################改回去docker配置文件#######################kolla-ansible -i ./all-in-one pull# 2.对主机进行部署前检查kolla-ansible -i ./all-in-one prechecks#注意：在进行第二步命令时如果报错，请执行以下命令进行规避。# 退出虚拟环境deactivate# 安装新版pip，下载比较慢可以在windows用idm下载在拷贝进去执行python get-pip.pycurl  https://bootstrap.pypa.io/pip/2.7/get-pip.py | python# 设置pip加速pip config set global.index-url  https://mirrors.aliyun.com/pypi/simple/# 使用pip安装一些python包pip install requestspip install docker==4.4.4pip install websocket-client==0.59.0#然后重新执行kolla-ansible -i ./all-in-one prechecks检查环境是否通过kolla-ansible -i ./all-in-one prechecks#通过后再执行部署kolla-ansible -i ./all-in-one deploy# 3.开始部署OpenStackkolla-ansible -i ./all-in-one deploy部署完成后生成rc文件kolla-ansible -i ./all-in-one  post-deploy#安装客户端yum install centos-release-openstack-train  -yyum makecache fast yum install python-openstackclient openstack-selinux -ysource /etc/kolla/admin-openrc.shcp /etc/kolla/admin-openrc.sh /root/mkdir -p /opt/cache/files/#上传镜像到/opt/cache/files/目录，因为脚本下载的太慢了，自己用idm下载上传进去，固定版本cirros-0.4.0-x86_64-disk.img#验证初始化环境，修改桥接网络，为自己桥接网段，比如我这里nat是管理网192.168.233.0/24，桥接是外部网：192.168.31.0/24vim /path/to/virtualenv/share/kolla-ansible/init-runonceEXT_NET_CIDR=$&#123;EXT_NET_CIDR:-&#39;192.168.31.0/24&#39;&#125;EXT_NET_RANGE=$&#123;EXT_NET_RANGE:-&#39;start=192.168.31.150,end=192.168.31.199&#39;&#125;EXT_NET_GATEWAY=$&#123;EXT_NET_GATEWAY:-&#39;192.168.31.1&#39;&#125;#运行测试，会创建很多东西sh /path/to/virtualenv/share/kolla-ansible/init-runonce</code></pre><h3 id="安装skyline"><a href="#安装skyline" class="headerlink" title="安装skyline"></a>安装skyline</h3><pre><code class="bash">#rm -rf /tmp/skyline &amp;&amp; mkdir /tmp/skyline &amp;&amp; mkdir /var/log/skyline &amp;&amp; mkdir /etc/skyline#创建skyline数据库和访问密码，mysql密码在 cat /etc/kolla/passwords.yml | grep -w database_passwordtmp_mysql_password=`cat /etc/kolla/passwords.yml | grep -w database_password|awk &#39;&#123;print $2&#125;&#39;`docker exec -it mariadb mysql -uroot -p$tmp_mysql_password -e &quot;CREATE DATABASE IF NOT EXISTS skyline DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;&quot;docker exec -it mariadb mysql -uroot -p$tmp_mysql_password -e &quot;GRANT ALL PRIVILEGES ON skyline.* TO &#39;skyline&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;Skyline_123&#39;;&quot;docker exec -it mariadb mysql -uroot -p$tmp_mysql_password -e &quot;GRANT ALL PRIVILEGES ON skyline.* TO &#39;skyline&#39;@&#39;%&#39;  IDENTIFIED BY &#39;Skyline_123&#39;;&quot;#查看当前环境oc配置文件，并将变量赋予进入keystone容器中cat /etc/kolla/admin-openrc.shexport OS_PROJECT_DOMAIN_NAME=Defaultexport OS_USER_DOMAIN_NAME=Defaultexport OS_PROJECT_NAME=adminexport OS_TENANT_NAME=adminexport OS_USERNAME=adminexport OS_PASSWORD=tstack@123export OS_AUTH_URL=http://192.168.233.240:35357/v3export OS_INTERFACE=internalexport OS_ENDPOINT_TYPE=internalURLexport OS_IDENTITY_API_VERSION=3export OS_REGION_NAME=RegionOneexport OS_AUTH_PLUGIN=password#进入keystone容器，创建skyline用户和密码，加入到admin角色中docker exec -it keystone bashopenstack user create --domain default --password Skyline_123 skylineopenstack role add --project service --user skyline admin#退出容器回到外面控制执行，注意更改IP和密码cat &gt; /etc/skyline/skyline.yaml &lt;&lt;EOFdefault:  access_token_expire: 3600  access_token_renew: 1800  cors_allow_origins: []  database_url: &#39;mysql://skyline:Skyline_123@192.168.233.240:3306/skyline&#39;  debug: false  log_dir: ./log  prometheus_basic_auth_password: &#39;&#39;  prometheus_basic_auth_user: &#39;&#39;  prometheus_enable_basic_auth: false  prometheus_endpoint: http://192.168.233.240:9091  secret_key: aCtmgbcUqYUy_HNVg5BDXCaeJgJQzHJXwqbXr0Nmb2o  session_name: sessiondeveloper:  show_raw_sql: falseopenstack:  keystone_url: http://192.168.233.240:35357/v3  default_region: RegionOne  interface_type: internal  system_user_name: skyline  system_user_password: Skyline_123  base_domains:  - heat_user_domain  base_roles:  - keystone_system_admin  - keystone_system_reader  - keystone_project_admin  - keystone_project_member  - keystone_project_reader  - nova_system_admin  - nova_system_reader  - nova_project_admin  - nova_project_member  - nova_project_reader  - cinder_system_admin  - cinder_system_reader  - cinder_project_admin  - cinder_project_member  - cinder_project_reader  - glance_system_admin  - glance_system_reader  - glance_project_admin  - glance_project_member  - glance_project_reader  - neutron_system_admin  - neutron_system_reader  - neutron_project_admin  - neutron_project_member  - neutron_project_reader  - heat_system_admin  - heat_system_reader  - heat_project_admin  - heat_project_member  - heat_project_reader  - placement_system_admin  - placement_system_reader  - panko_system_admin  - panko_system_reader  - panko_project_admin  - panko_project_member  - panko_project_reader  - ironic_system_admin  - ironic_system_reader  - octavia_system_admin  - octavia_system_reader  - octavia_project_admin  - octavia_project_member  - octavia_project_reader  default_region: RegionOne  extension_mapping:    fwaas_v2: neutron_firewall    vpnaas: neutron_vpn  interface_type: public  keystone_url: http://192.168.233.240:35357/v3/  nginx_prefix: /api/openstack  reclaim_instance_interval: 604800  service_mapping:    baremetal: ironic    compute: nova    database: trove    identity: keystone    image: glance    load-balancer: octavia    network: neutron    object-store: swift    orchestration: heat    placement: placement    volumev3: cinder  system_admin_roles:  - admin  - system_admin  system_project: &#39;service&#39;  system_project_domain: &#39;Default&#39;  system_reader_roles:  - system_reader  system_user_domain: Default  system_user_name: skyline  system_user_password: &#39;Skyline_123&#39;setting:  base_settings:  - flavor_families  - gpu_models  - usb_models  flavor_families:  - architecture: x86_architecture    categories:    - name: general_purpose      properties: []    - name: compute_optimized      properties: []    - name: memory_optimized      properties: []    - name: high_clock_speed      properties: []  - architecture: heterogeneous_computing    categories:    - name: compute_optimized_type_with_gpu      properties: []    - name: visualization_compute_optimized_type_with_gpu      properties: []  gpu_models:  - nvidia_t4  usb_models:  - usb_cEOF#允许skyline引导依赖docker run -d --name skyline_bootstrap -e KOLLA_BOOTSTRAP=&quot;&quot; -v /etc/skyline/skyline.yaml:/etc/skyline/skyline.yaml --net=host 99cloud/skyline:latest#查看日志docker logs skyline_bootstrap#查看最后日志是否为exit 0，如果不是请检查[root@allinone cinder]# docker logs skyline_bootstrap+ echo &#39;/usr/local/bin/gunicorn -c /etc/skyline/gunicorn.py skyline_apiserver.main:app&#39;+ mapfile -t CMD++ tail /run_command++ xargs -n 1+ [[ -n 0 ]]+ cd /skyline-apiserver/+ make db_syncalembic -c skyline_apiserver/db/alembic/alembic.ini upgrade head2022-12-14 05:22:08.626 | INFO     | alembic.runtime.migration:__init__:204 - Context impl MySQLImpl.2022-12-14 05:22:08.626 | INFO     | alembic.runtime.migration:__init__:207 - Will assume non-transactional DDL.2022-12-14 05:22:08.633 | INFO     | alembic.runtime.migration:run_migrations:618 - Running upgrade  -&gt; 000, init+ exit 0#删除引导依赖docker rm -f skyline_bootstrap#启动skyline服务docker run -d --name skyline --restart=always -v /etc/skyline/skyline.yaml:/etc/skyline/skyline.yaml --net=host 99cloud/skyline:latest</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
